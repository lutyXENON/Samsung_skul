package tryes;

public class try2 {
    public static void main(String[] args) {
        //Заполним массив, количество строк мы обозначим m, а столбцов - n.
        int m = 5;
        int n = 5;

        //С помощью переменной s задаются числа внутри массива,
        //начиная с 25 в данном случае.
        int s = m * n - 1;

        //Объявляем и инициализируем массив.
        int[][] array = new int[m][n];

        //Заполняем периметр массива против часовой стрелке.
        //Не забудьте поменять инкремент на декремент у переменной s.
        for (int x = 0; x < m; x++) {
            array[x][0] = s;
            s--;
        }
        for (int y = 1; y < n; y++) {
            array[m - 1][y] = s;
            s--;
        }
        for (int x = m - 2; x >= 0; x--) {
            array[x][n - 1] = s;
            s--;
        }
        for (int y = n - 2; y >= 1; y--) {
            array[0][y] = s;
            s--;
        }
//
//        //Периметр заполнен. Продолжаем заполнять массив и задаём
//        //координаты ячейки, которую необходимо заполнить следующей.
//        int c = 1;
//        int d = 1;
//
//        while (s > 1) {
//            /*
//            В Java инициализированный интовый массив заполняется нулями. Периметр мы заполнили числами, отличными от
//            нулей. Следующие циклы поочерёдно работают, заполняя ячейки. Вложенный цикл останавливается, если следующая
//            ячейка имеет значение, отличное от ноля. Ячейка, на которой остановился цикл, не заполняется. Из-за этого
//            условие для выхода из внешнего цикла - (s>1). Если Вы поставите 0, получится вечный цикл.
//             */
//
//            //Движемся вниз.
//            while (array[c + 1][d] == 0) {
//                array[c][d] = s;
//                s--;
//                c++;
//            }
//            //Движемся вправо.
//            while (array[c][d + 1] == 0) {
//                array[c][d] = s;
//                s--;
//                d++;
//            }
//
//            //Движемся вверх.
//            while (array[c - 1][d] == 0) {
//                array[c][d] = s;
//                s--;
//                c--;
//            }
//
//            //Движемся влево.
//            while (array[c][d - 1] == 0) {
//                array[c][d] = s;
//                s--;
//                d--;
//            }
//
//        }
//
//        //При данном решении в центре всегда остаётся незаполненная ячейка.
//        //Убираем её при помощи следующего цикла.
//        for (int x = 0; x < m; x++) {
//            for (int y = 0; y < n; y++) {
//                if (array[x][y] == 0) {
//                    array[x][y] = s;
//                }
//            }
//        }

        //Выводим массив в консоль.
        for (int x = 0; x < m; x++) {
            for (int y = 0; y < n; y++) {
                if (array[x][y] < 10) {
                    //Два пробела, чтобы в консоли столбцы были ровные.
                    System.out.print(array[x][y] + "  ");
                } else {
                    System.out.print(array[x][y] + "  ");
                }
            }
            System.out.println("");
        }
    }
}
